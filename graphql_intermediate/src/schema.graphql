# import UserOrderByInput, PostOrderByInput, CommentOrderByInput from "./generated/prisma.graphql"

type Query {
    posts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput): [Post!]!
    users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
    password: String!
    comments(first: Int, skip: Int, after: String, orderBy: CommentOrderByInput): [Comment!]!
    post(id: ID!): Post!
    me: User!
    myPosts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput): [Post!]
}

type Mutation {
    createUser(data: CreateUserInput): AuthPayload!
    loginUser(data: LoginUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput): User!
    createPost(data: CreatePostInput): Post!
    updatePost(id: ID!, data: UpdatePostInput): Post!
    deletePost(id: ID!): Post!
    createComment(data: CreateCommentInput): Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput): Comment!
}

type Subscription {
    comment(postID: ID!): CommentSubscriptionPayload!
    post: PostSubscripitionPayload!
    myPost: PostSubscripitionPayload!
}

type AuthPayload {
    token: String!,
    user: User!
}

input CreateUserInput{
    name: String!
    email: String!
    password: String!
}

input LoginUserInput{
    email: String!,
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
    password: String
}

input CreatePostInput{
    title: String!
    body: String!
    published: Boolean!
}

input UpdatePostInput{
    title: String
    body: String
    published: Boolean
}

input CreateCommentInput {
    text: String!
    post: ID!
}

input UpdateCommentInput {
    text: String
}

type User {
    id: ID!
    name: String!
    email: String
    posts: [Post!]!
    comments: [Comment!]!,
    updatedAt: String!
    createdAt: String!
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
    updatedAt: String!
    createdAt: String!
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
    updatedAt: String!
    createdAt: String!
}

type PostSubscripitionPayload {
    mutation: String!
    node: Post
}

type CommentSubscriptionPayload {
    mutation: String!
    node: Comment
}
