type Query {
    posts(query: String): [Post!]!
    users(query: String): [User!]!
    comments: [Comment!]!
}

type Mutation {
    createUser(data: CreateUserInput): User!
    deleteUser(id: ID!): User!
    updateUser(id: ID!, data: UpdateUserInput): User!
    createPost(data: CreatePostInput): Post!
    updatePost(id: ID!, data: UpdatePostInput): Post!
    deletePost(id: ID!): Post!
    createComment(data: CreateCommentInput): Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput): Comment!
}

type Subscription {
    comment(postID: ID!): CommentSubscriptionPayload!
    post: PostSubscripitionPayload!
}

input CreateUserInput{
    name: String!
    email: String!
}

input UpdateUserInput {
    name: String
    email: String
}

input CreatePostInput{
    title: String!
    body: String!
    published: Boolean!
    author: ID!
}

input UpdatePostInput{
    title: String
    body: String
    published: Boolean
}

input CreateCommentInput {
    text: String!
    post: ID!
    author: ID!
}

input UpdateCommentInput {
    text: String
}

type User {
    id: ID!
    name: String!
    email: String!
    posts: [Post!]!
    comments: [Comment!]!
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
}

type PostSubscripitionPayload {
    mutation: String!
    node: Post
}

type CommentSubscriptionPayload {
    mutation: String!
    node: Comment
}
